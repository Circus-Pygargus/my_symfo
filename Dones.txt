Création du fichier index.php, on y colle :
    <?php
    $name = isset($_GET['name'])? $_GET['name'] : 'world';
    header('Content-Type: text/html; charset=utf8');
    printf('Hello %s', htmlspecialchars($name, ENT_QUOTES));

on va avoir besoin de réaliser des test unitaires, on install donc phpunit
    composer require phpunit/phpunit --dev
phpunit est ajouté dans composer.json et surtout on a un executable qui s'est collé dans /vendor/bin/phpunit
on peut le lancer avec 
    vendor/bin/phpunit   (sous linux ou mac)
    ./vendor/bin/phpunit   (sous windows)
on a pas lancé de test unitaire mais on sait au moins que cela fonctionnera quand on en aura besoin ;)

Création du dossier /tests
on y crée le fichier IndexTest.php, avec :
    <?php

    use PHPUnit\Framework\TestCase;
    class IndexTest extends TestCase
    {
        public function testHello()
        {
            $_GET['name'] = 'Fabien';
            ob_start();
            include 'index.php';
            $content = ob_get_clean();
            $this->assertEquals('Hello Fabien', $content);
        }
    }

on lance le test unitaire en donnant le chemin vers le dossier contenant les tests, avec l'options color pour avoir un chouette rendu
    vendor/bin/phpunit tests --color
on a un soucis, car phpunit refuse de faire des tests sur les headers ... 
on modif la classe IndexTest en collant ces commentaires avant la méthode testHello : (ici la ligne @runInSeparateProcess suffit pour réussir le test)
    /**
     * @runInSeparateProcess
     * @return void
     * @throws ExpectationFailedException
     * @throws InvalidArgumentException
     */
et c'est ok

Bon, c'est une arnaque ce tuto puisqu'il faut déjà installer un composant symfo :(
pour faciliter la tâche on va installer le composant permattant de gérer les requêtes http :
    composer require symfony/http-foundation
on ajoute dans index.php pour pouvoir l'utiliser :
    use Symfony\Component\HttpFoundation\Request;
    require __dir__ . '/vendor/autoload.php';
    $request = Request::createFromGlobals();
ici un var_dump de $request nous montre le contenu, on pourra maintenant récupérer les requêtes POST avec $request->request et les requêtes GET avec $request->query
on peut maintenant remplacer cette ligne
    // $name = isset($_GET['name'])? $_GET['name'] : 'world';
par celle-ci :
    $name = $request->query->get('name', 'world');  // si get('name') n'existe pas colle 'world' =)
on peut aussi remplacer ces 2 lignes :
    header('Content-Type: text/html; charset=utf8');
    printf('Hello %s', htmlspecialchars($name, ENT_QUOTES));
par 
    $response = new Response();
    $response->headers->set('Content-type', 'text/html; charset=utf8');
    $response->setContent(sprintf('Hello %s', htmlspecialchars($name, ENT_QUOTES)));
    $response->send();
ici sprintf, au lieu d'afficher comme avec printf, renverra une chaîne de caractères, et le send() fera le taf

on peut maintenant retirer la ligne  * @runInSeparateProcess de commentaire de IndexTest
et le test passe sans soucis !
fin de la première vidéo de Lior
git commit -m "HTTP Foundation"





ici on veut faire une deuxième page, et aulieu de créer une page bye.php à la racine on va créer une page qui gèrera la redirection vers la page demandée en fonction de l'utiliser
création de /src/pages/hello.php  : on y colle le contenu de index.php
création de bye.php
on vide index.php et on y colle
    <?php
    use Symfony\Component\HttpFoundation\Request;
    require __DIR__ . '/vendor/autoload.php';
    $request = Request::createFromGlobals();
    $pathInfo = $request->getPathInfo();
    // var_dump($pathInfo);die();
    if ($pathInfo === '/hello') {
        include __DIR__ . '/src/pages/hello.php';
    }
    else {
        include __DIR__ . '/src/pages/bye.php';
    }
ici bizarrement on dirait que le moderewite (le script pour vagrant) n'a pas été pris en compte car je suis obligé d'appeler la page index.php :
    127.0.0.1:8080/index.php/hello?name=redirection
si je fait un 
    127.0.0.1:8080/hello?name=redirection
        |-> erreur 404 ...
bon, je viens d'y passer une heure ... sans succès ... je continue la vidéo et j'aurai pas de mod_rewrite, tant pis ... :(

pour l'instant, on a que 2 pages, mais si on en veut bcp plus, les if et else if vont être trop nombreux ...
on modifie en utilisant un array des possibilités de routes :
    <?php
    use Symfony\Component\HttpFoundation\Request;
    require __DIR__ . '/vendor/autoload.php';
    $request = Request::createFromGlobals();
    $map = [
        '/hello' => 'hello.php',
        '/bye' => 'bye.php'
    ];
    $pathInfo = $request->getPathInfo();
    include __DIR__ . '/src/pages/' . $map[$pathInfo];

on a un truc pas cool : trop de code répété dans les fichiers hello et bye
on va donc créer la $response = new Response(); dans index.php
virant du coup cette ligne des 2 fichiers
ceux-ci vont juste travailler avec la $response
et c'est index.php qui la renverra :
index.php :
    <?php
    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;
    require __DIR__ . '/vendor/autoload.php';
    $request = Request::createFromGlobals();
    $response = new Response();
    $map = [
        '/hello' => 'hello.php',
        '/bye' => 'bye.php'
    ];
    $pathInfo = $request->getPathInfo();
    include __DIR__ . '/src/pages/' . $map[$pathInfo];
    $response->send();
hello.php :
    <?php
    $name = $request->query->get('name', 'world');
    $response->headers->set('Content-type', 'text/html; charset=utf8');
    $response->setContent(sprintf('Hello %s', htmlspecialchars($name, ENT_QUOTES)));
bye.php :
    <?php
    $response-> setContent("Goodbye !");
cool !

par contre on a plus de gestion de page 404 ... 
là, facile, il suffit de remplacer dans index.php
    include __DIR__ . '/src/pages/' . $map[$pathInfo];
par 
    if (isset($map[$pathInfo])) {
        include __DIR__ . '/src/pages/' . $map[$pathInfo];
    }
    else {
        $response->setContent("La page demandée n'existe pas.");
        $response->setStatusCode(404);
    }

on modifie encore un peu car on voudrait que le front dev aie encore plus facile pour faire sa page donc :
hello.php :
    <?php
    $name = $request->query->get('name', 'world');
    ?>
    Hello <?= htmlspecialchars($name, ENT_QUOTES) ?>
bye.php
    <h1>Goodbye !</h1>
et on change index.php pour :    
    if (isset($map[$pathInfo])) {
        ob_start();
        include __DIR__ . '/src/pages/' . $map[$pathInfo];
        $response->setContent(ob_get_clean());
    }
    else {
        $response->setContent("La page demandée n'existe pas.");
        $response->setStatusCode(404);
    }
ici avec le tampon créé avec ob_start(); permet de ne pas envoyer le rendu depuis hello.php, ainsi il attend le $response.send()

maintenant pour ajouter une page, il suffit de créer un fichier dans /src/pages et de coller la ref dans index.php dans $map = [] 
=)

on veut aussi que le user ne puisse accéder qu'au dossier public au lieu de la racine du site
on colle index.php dans /public/
on modif index.php pour :
    require __DIR__ . '/../vendor/autoload.php';
    include __DIR__ . '/../src/pages/' . $map[$pathInfo];
ensuite il faut dire à apache de pointer les requêtes vers /public :
    sudo nano /etc/apache2/sites-enabled/000-default.conf
on modif pour avoir 
    DocumentRoot /var/www/html/public
CTRL + o pour enregistrer, entrée pour confirmer et CTRL + x pour fermer
on redémarre apache pour qu'il prenne en commpte la nouvelle modif 
    sudo service apache2 restart
et ça fonctionne !
fin de la deuxième vidéo de Lior
git commit -m "Le front controller"





on veut virer la récup de $_GET['name'] de hello.php
on ajoute à index.php    
    // va créer des variable selon le contenu du tableau
    extract($request->query->all());
    // var_dump($name);
maintenant on peut virer le contenu de hello.php et remplacer par :
    Hello <?= htmlspecialchars(isset($name)? $name : 'world', ENT_QUOTES) ?>
c'est beau =)
on veut encore amélioere le routing, on va donc charger une librairie de symfo :
    composer require symfony/routing
on veut faciliter la création de nouvelles routes, on crée le fichier /src/routes.php, on y colle
    <?php
    use Symfony\Component\Routing\Route;
    use Symfony\Component\Routing\RouteCollection;
    $routes = new RouteCollection;
    // will set $name to 'world' if $_GET['name'] not found =)
    // ! on utilise plus dans l'url /hello?name=riri mais /hello/riri !!!
    $routes->add('hello', new Route('/hello/{name}', ['name' => 'world']));
    $routes->add('bye', new Route('/bye'));
    return $routes;
et on modifie index.php pour avoir :
    <?php
    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Matcher\UrlMatcher;
    use Symfony\Component\Routing\RequestContext;
    use Symfony\Component\Routing\Exception\ResourceNotFoundException;
    require __DIR__ . '/../vendor/autoload.php';
    $request = Request::createFromGlobals();
    $response = new Response();
    require __DIR__ . '/../src/routes.php';
    $context = new RequestContext();
    $context->fromRequest($request);
    $urlMatcher = new UrlMatcher($routes, $context);
    $pathInfo = $request->getPathInfo();
    try {
        $urlMatcher->match($pathInfo);
        // va créer des variable selon le contenu du tableau
        // va créer $_route
        // va créer $name si présent dans l'url
        extract($resultat);
        // var_dump($name);
        ob_start();
        include __DIR__ . '/../src/pages/' . $_route . '.php';
        $response->setContent(ob_get_clean());
    }
    catch (ResourceNotFoundException $e) {
        // $response->setContent("La page demandée n'existe pas.");
        // $response->setStatusCode(404);
        // remplace les 2 lignes du haut :
        $response = new Response("La page demandée n'existe pas.", 404);
    }
    catch (Exception $e) {
        $response->setContent('Une erreur est arrivée sur le serveur.');
        $response->setStatusCode(500);
    }
    $response->send();
on simplifie du coup hello.php :
    Hello <?= htmlspecialchars($name, ENT_QUOTES) ?>
maintenant pour ajouter un route, il suffit de l'ajouter dans /src/routes.php et de lui faire un fichier de template dans /src/pages/

fin de la 3eme video de la série de Lior
git commit -m "Le routing"





on va ajouter des callable dans les routes, ça permettra d'appelerun fonction (la callable) pour chaque route
aller voir la doc php sur les callable : https://www.php.net/manual/fr/language.types.callable.php
on crée la classe GreetingController, on y colle :
    <?php
    namespace App\Controller;
    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;
    class GreetingController
    {
        public function hello (Request $request)
        {   
            $name = $request->attributes->get('name');
            ob_start();
            include __DIR__ . '/../pages/hello.php';
            return new Response(ob_get_clean());
        }
    }
on modifie la route hello pour avoir :    
    $routes->add('hello', new Route('/hello/{name}', [
        'name' => 'world',
        // ici notre callable function (on l'appelle _controller par convention)
        // ici quand on appellera _controller, il ira chercher la méthode hello de l'objet instancié depuis la classe GreetingController
        '_controller' => [new App\Controller\GreetingController, 'hello']
    ]));
on modifie le try d'index.php pour n'avoir plus que ceci dedans :    
    $resultat = $urlMatcher->match($pathInfo);
    $request->attributes->add($resultat);
    $response = call_user_func($resultat['_controller'], $request);
ici on ajoute le contenu de $resultat à $request que l'on envoie en argument à la callable function _controller qui a été déclarée dans la route hello
cette callable appelle la méthode hello de l'objet instancié à partir de la classe GreetingController
mais soucis !!!
on ne peut pas utiliser le namespace App dans la route car il n'est pas connu ...
il faut donc modifier composer.json avec ceci pour lui dire où se trouve App :
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    }
    et pour que ces lignes soient prises en compte, il faut dans le terminal: 
        composer dump-autoload
ce qui modifie le composer.lock ;)

pour la route bye, on a juste à ajouter cette méthode au Controller GreetingController :
    public function bye ()
    {
        ob_start();
        include __DIR__ . '/../pages/bye.php';
        return new Response(ob_get_clean());
    }
et on change la route bye pour :
    $routes->add('bye', new Route('/bye', [
        '_controller' => [new App\Controller\GreetingController, 'bye']
    ]));

si on veut ajouter un page about (avec comme route /a-propos) avec un template situé dans un sous dossier (pages/cms) :
on crée le template /pages/cms/about.php, on y colle :
    <h1>A propos</h1>
on crée un controller PageController (puisqu'ici ni hello ni bye) :
    <?php
    namespace App\Controller;
    use Symfony\Component\HttpFoundation\Response;
    class PageController
    {
        public function about ()
        {
            ob_start();
            include __DIR__ . '/../pages/cms/about.php';
            return new Response(ob_get_clean());
        }
    }
et on ajoute la route au router :
    $routes->add('cms/about', new Route('/a-propos', [
        '_controller' => [new App\Controller\PageController, 'about']
    ]));
et ça marche =)

fin de la 4eme vidéo de la liste de Lior
git commit -m "Les callables"





Il reste un soucis, si notre site prend bcp d'ampleur, il faudra faire autant de routes et surtout instancier autant de new Route() que de route, et c'est pas cool surtout pour la mémoire !!
alors, on modifie la route about en modifiant pour avoir en une string le nom du Controller et celui de la méthode voulue, les 2 séparés par un @  :   
    $routes->add('cms/about', new Route('/a-propos', [
        '_controller' => 'App\Controller\PageController@about'
    ]));
on modifie index.php pour traiter cette string et pour s'en servir pour appeler la classe et sa méthode (dans le try{}):    
    // ici on récup le nom du controller :
    // on récup le string dans $resultat['_controller'] depuis l'index 0 (le début donc) jusqu'à la position du @
    $className = substr(
        $resultat['_controller'],
        0,
        strpos($resultat['_controller'], '@')
    );
    // ici on chope une portion du string contenu dans $resultat['_controller'] depuis la position du @ + 1 (on veut pas le @) et qui va jusqu'à la fin (qu'on n'écrit pas)
    $methodName = substr(
        $resultat['_controller'],
        strpos($resultat['_controller'], '@') + 1
    );
    // maintenant on peut appeler le callable ;)
    $controller = [new $className, $methodName];
    // ici attributes existe juste pour que nous (les dev) puissions ajouter du contenu à $request
    $request->attributes->add($resultat);
    // on appelle la fonction (crée par le dev) $controller et on lui donne an argument $request (on trouve la callable _controller dans routes.php)
    $response = call_user_func($controller, $request);
il ne reste plus qu'à modifier les autres routes :
    $routes->add('hello', new Route('/hello/{name}', [
        'name' => 'world',
        // ici notre callable function (on l'appelle _controller par convention)
        // ici quand on appellera _controller, il ira chercher la méthode hello de l'objet instancié depuis la classe GreetingController
        '_controller' => 'App\Controller\GreetingController@hello'
    ]));
    $routes->add('bye', new Route('/bye', [
        '_controller' => 'App\Controller\GreetingController@bye'
    ]));
maintenant, on instanciera une nouvelle Route uniquement quand on en a besoin =)
mais c'est pas encore top, cra bcp de code dans index.php ...
on va utiliser une librairie Symfo : le Controller Resolver
on installe notre dépendance :
    composer require symfony/http-kernel
dans index.php, on ajoute juste avant le try{}
    $controllerResolver = new ControllerResolver();
on vire les lignes du try{} que l'on a créé juste avant (celles qui trouvaient le controller et sa méthode)
et on remplace par :
    // nous donne un array : [$instanceDuController, 'nomDeLaMéthode']
    $controller = $controllerResolver->getController($request);
il faut encore modifier les route car Symfo ne comprend pas @ (c'est plus du Laravel), on les remplace par des ::
    $routes->add('hello', new Route('/hello/{name}', [
        'name' => 'world',
        // ici notre callable function (on l'appelle _controller par convention)
        // ici quand on appellera _controller, il ira chercher la méthode hello de l'objet instancié depuis la classe GreetingController
        '_controller' => 'App\Controller\GreetingController::hello'
    ]));
    $routes->add('bye', new Route('/bye', [
        '_controller' => 'App\Controller\GreetingController::bye'
    ]));
    $routes->add('cms/about', new Route('/a-propos', [
        // '_controller' => [new App\Controller\PageController, 'about']    
        '_controller' => 'App\Controller\PageController::about'
    ]));
et c'est bon =)

on va maintenant s'attaquer aux arguments de la route
on voudrait supprimer cette ligne de GreetingController::hello()   $name = $request->attributes->get('name');
donc on la vire et on colle $name en argument de la méthode hello
dans index.php, juste avant le try{}, on ajoute :
    $argumentResolver = new ArgumentResolver();
et dans le try{} :
    // ici l'ArgumentController va vérifier quels arguments sont nécessaires à la méthode que l'on veut appeler dasn $controller (ici hello et on veut $request et $name) et il les chope dans $request
    $arguments = $argumentResolver->getArguments($request, $controller);
ensuite on modifie la ligne 
    $response = call_user_func($controller, $request);
en (array car $arguments est un tableau)
    $response = call_user_func_array($controller, $arguments);

fin de la 5eme vidéo de la série
git commit -m "Les resolvers"